---
AWSTemplateFormatVersion: 2010-09-09
Description: Demonstration of vertical scaling with EC2 Auto Scaling Groups
Mappings:
  CidrMappings:
    public-subnet-1:
      CIDR: 10.0.1.0/24
    public-subnet-2:
      CIDR: 10.0.2.0/24
    vpc:
      CIDR: 10.0.0.0/16
  amazonLinuxAmi:
    us-east-1:
      AMI: ami-035be7bafff33b6b6
    us-east-2:
      AMI: ami-04328208f4f0cf1fe
    us-west-1:
      AMI: ami-0799ad445b5727125
    us-west-2:
      AMI: ami-032509850cf9ee54e
Metadata:
  Author:
    Description: Chad Schmutzer <schmutze@amazon.com>
  License:
    Description: 'Copyright 2019 Amazon.com, Inc. and its affiliates. All Rights Reserved.

      Licensed under the Amazon Software License (the "License"). You may not use this file
      except in compliance with the License. A copy of the License is located at

      http://aws.amazon.com/asl/

      or in the "license" file accompanying this file. This file is distributed on an "AS IS"
      BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
      License for the specific language governing permissions and limitations under the License.'
Outputs:
  awsRegionId:
    Description: The AWS Region ID your template was launched in
    Value:
      Ref: AWS::Region
  c4large:
    Value:
      Ref: c4large
  c4xlarge:
    Value:
      Ref: c4xlarge
  instanceProfile:
    Description: Instance profile ARN
    Value:
      Fn::GetAtt:
      - instanceProfile
      - Arn
  instanceSecurityGroup:
    Description: Instance security group
    Value:
      Ref: instanceSecurityGroup
  lambdaFunction:
    Description: Lambda function
    Value:
      Ref: lambdaFunction
  loadBalancerSecurityGroup:
    Description: Load Balancer security group
    Value:
      Ref: loadBalancerSecurityGroup
  publicSubnet1:
    Description: Public subnet 1
    Value:
      Ref: publicSubnet1
  publicSubnet2:
    Description: Public subnet 2
    Value:
      Ref: publicSubnet2
  snsTopic:
    Description: SNS topic ARN
    Value:
      Ref: snsTopic
  vpc:
    Description: The VPC
    Value:
      Ref: vpc
Parameters:
  alarmCpuHighThreshold:
    Default: 75
    Description: CloudWatch alarm CPU high threshold
    Type: String
  alarmCpuLowThreshold:
    Default: 25
    Description: CloudWatch alarm CPU low threshold
    Type: String
  instanceType:
    AllowedValues:
    - c4large
    - c4xlarge
    Default: c4large
    Description: Enter c4large, c4xlarge. Default is c4large.
    Type: String
  keyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the EC2 Instances
    Type: AWS::EC2::KeyPair::KeyName
  sourceCidr:
    Description: CIDR/IP range for instance ssh/http access and load balancer http access
    Type: String
Resources:
  alarmCpuHigh:
    DependsOn:
    - snsTopic
    Properties:
      ActionsEnabled: true
      AlarmActions:
      - Ref: snsTopic
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
      - Name: AutoScalingGroupName
        Value:
          Ref: autoScalingGroup
      EvaluationPeriods: 1
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Period: 300
      Statistic: Average
      Threshold:
        Ref: alarmCpuHighThreshold
    Type: AWS::CloudWatch::Alarm
  alarmCpuLow:
    DependsOn:
    - snsTopic
    Properties:
      ActionsEnabled: true
      AlarmActions:
      - Ref: snsTopic
      ComparisonOperator: LessThanThreshold
      Dimensions:
      - Name: AutoScalingGroupName
        Value:
          Ref: autoScalingGroup
      EvaluationPeriods: 1
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Period: 300
      Statistic: Average
      Threshold:
        Ref: alarmCpuLowThreshold
    Type: AWS::CloudWatch::Alarm
  attachGateway:
    DependsOn:
    - vpc
    - internetGateway
    Properties:
      InternetGatewayId:
        Ref: internetGateway
      VpcId:
        Ref: vpc
    Type: AWS::EC2::VPCGatewayAttachment
  autoScalingGroup:
    DependsOn:
    - c4large
    - c4xlarge
    - publicSubnet1
    - publicSubnet2
    - targetGroup
    Properties:
      DesiredCapacity: 1
      HealthCheckType: EC2
      LaunchTemplate:
        LaunchTemplateName:
          Ref: instanceType
        Version: 1
      MaxSize: 2
      MinSize: 0
      TargetGroupARNs:
      - Ref: targetGroup
      VPCZoneIdentifier:
      - Ref: publicSubnet1
      - Ref: publicSubnet2
    Type: AWS::AutoScaling::AutoScalingGroup
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: 1
        MinInstancesInService: 1
  autoScalingServiceLinkedRole:
    Properties:
      AWSServiceName: autoscaling.amazonaws.com
      Description: Default Service-Linked Role enables access to AWS Services and Resources
        used or managed by Auto Scaling
    Type: AWS::IAM::ServiceLinkedRole
  c4large:
    Properties:
      LaunchTemplateData:
        IamInstanceProfile:
          Arn:
            Fn::GetAtt:
            - instanceProfile
            - Arn
        ImageId:
          Fn::FindInMap:
          - amazonLinuxAmi
          - Ref: AWS::Region
          - AMI
        InstanceType: c4.large
        KeyName:
          Ref: keyName
        SecurityGroupIds:
        - Ref: instanceSecurityGroup
        TagSpecifications:
        - ResourceType: instance
          Tags:
          - Key: Name
            Value: Demonstration of vertical scaling with EC2 Auto Scaling Groups - EC2 instance
        UserData: I2Nsb3VkLWNvbmZpZwpyZXBvX3VwZGF0ZTogdHJ1ZQpyZXBvX3VwZ3JhZGU6IGFsbAoKcGFja2FnZXM6CiAgLSBodHRwZAogIC0gY3VybAoKcnVuY21kOgogIC0gWyBzaCwgLWMsICJlY2hvIGhlbGxvIHdvcmxkLiBNeSBpbnN0YW5jZS1pZCBpcyAkKGN1cmwgLXMgaHR0cDovLzE2OS4yNTQuMTY5LjI1NC9sYXRlc3QvbWV0YS1kYXRhL2luc3RhbmNlLWlkKS4gTXkgaW5zdGFuY2UtdHlwZSBpcyAkKGN1cmwgLXMgaHR0cDovLzE2OS4yNTQuMTY5LjI1NC9sYXRlc3QvbWV0YS1kYXRhL2luc3RhbmNlLXR5cGUpLiA+IC92YXIvd3d3L2h0bWwvaW5kZXguaHRtbCIgXQogIC0gWyBzaCwgLWMsICJzeXN0ZW1jdGwgZW5hYmxlIGh0dHBkIiBdCiAgLSBbIHNoLCAtYywgInN5c3RlbWN0bCBzdGFydCBodHRwZCIgXQoKCg==
      LaunchTemplateName: c4large
    Type: AWS::EC2::LaunchTemplate
  c4xlarge:
    Properties:
      LaunchTemplateData:
        IamInstanceProfile:
          Arn:
            Fn::GetAtt:
            - instanceProfile
            - Arn
        ImageId:
          Fn::FindInMap:
          - amazonLinuxAmi
          - Ref: AWS::Region
          - AMI
        InstanceType: c4.xlarge
        KeyName:
          Ref: keyName
        SecurityGroupIds:
        - Ref: instanceSecurityGroup
        TagSpecifications:
        - ResourceType: instance
          Tags:
          - Key: Name
            Value: Demonstration of vertical scaling with EC2 Auto Scaling Groups - EC2 instance
        UserData: I2Nsb3VkLWNvbmZpZwpyZXBvX3VwZGF0ZTogdHJ1ZQpyZXBvX3VwZ3JhZGU6IGFsbAoKcGFja2FnZXM6CiAgLSBodHRwZAogIC0gY3VybAoKcnVuY21kOgogIC0gWyBzaCwgLWMsICJlY2hvIGhlbGxvIHdvcmxkLiBNeSBpbnN0YW5jZS1pZCBpcyAkKGN1cmwgLXMgaHR0cDovLzE2OS4yNTQuMTY5LjI1NC9sYXRlc3QvbWV0YS1kYXRhL2luc3RhbmNlLWlkKS4gTXkgaW5zdGFuY2UtdHlwZSBpcyAkKGN1cmwgLXMgaHR0cDovLzE2OS4yNTQuMTY5LjI1NC9sYXRlc3QvbWV0YS1kYXRhL2luc3RhbmNlLXR5cGUpLiA+IC92YXIvd3d3L2h0bWwvaW5kZXguaHRtbCIgXQogIC0gWyBzaCwgLWMsICJzeXN0ZW1jdGwgZW5hYmxlIGh0dHBkIiBdCiAgLSBbIHNoLCAtYywgInN5c3RlbWN0bCBzdGFydCBodHRwZCIgXQoKCg==
      LaunchTemplateName: c4xlarge
    Type: AWS::EC2::LaunchTemplate
  ec2FleetServiceLinkedRole:
    Properties:
      AWSServiceName: ec2fleet.amazonaws.com
      Description: Default EC2 Fleet Service Linked Role
    Type: AWS::IAM::ServiceLinkedRole
  instanceProfile:
    DependsOn:
    - instanceRole
    Properties:
      Path: /
      Roles:
      - Ref: instanceRole
    Type: AWS::IAM::InstanceProfile
  instanceRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
      Path: /
    Type: AWS::IAM::Role
  instanceSecurityGroup:
    DependsOn:
    - vpc
    Properties:
      GroupDescription: Allow ssh (22) and http (80)
      SecurityGroupIngress:
      - CidrIp:
          Ref: sourceCidr
        FromPort: 80
        IpProtocol: tcp
        ToPort: 80
      - CidrIp:
          Ref: sourceCidr
        FromPort: 22
        IpProtocol: tcp
        ToPort: 22
      VpcId:
        Ref: vpc
    Type: AWS::EC2::SecurityGroup
  instanceSecurityGroupIngress:
    DependsOn:
    - instanceSecurityGroup
    - loadBalancerSecurityGroup
    Properties:
      FromPort: 80
      GroupId:
        Ref: instanceSecurityGroup
      IpProtocol: tcp
      SourceSecurityGroupId:
        Ref: loadBalancerSecurityGroup
      ToPort: 80
    Type: AWS::EC2::SecurityGroupIngress
  internetGateway:
    DependsOn:
    - vpc
    Type: AWS::EC2::InternetGateway
  lambdaFunction:
    DependsOn:
    - lambdaFunctionRole
    Properties:
      Code:
        ZipFile:
          Fn::Sub: "import json\nimport boto3\ndef handler(event, context):\n  print(\"Received\
            \ event: \" + json.dumps(event, indent=2))\n  message = event['Records'][0]['Sns']['Message']\n\
            \  print(\"From SNS: \" + message)\n  client = boto3.client('cloudformation')\n\
            \  response = client.update_stack(StackName='${AWS::StackName}',UsePreviousTemplate=True,Parameters=[{'ParameterKey':'instanceType','ParameterValue':'c4xlarge'},{'ParameterKey':'keyName','UsePreviousValue':True},{'ParameterKey':'sourceCidr','UsePreviousValue':True}],Capabilities=['CAPABILITY_IAM'])\n\
            \  print(response)\n  return response\n"
      Handler: index.handler
      Role:
        Fn::GetAtt:
        - lambdaFunctionRole
        - Arn
      Runtime: python3.7
    Type: AWS::Lambda::Function
  lambdaFunctionPermission:
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
        - lambdaFunction
        - Arn
      Principal: sns.amazonaws.com
      SourceArn:
        Ref: snsTopic
    Type: AWS::Lambda::Permission
  lambdaFunctionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      - arn:aws:iam::aws:policy/AutoScalingFullAccess
      - arn:aws:iam::aws:policy/AmazonEC2FullAccess
      - arn:aws:iam::aws:policy/AdministratorAccess
      Path: /
      Policies:
      - PolicyDocument:
          Statement:
          - Action: elasticloadbalancing:DeregisterTargets
            Effect: Allow
            Resource: '*'
          - Action: ec2:DescribeTags
            Effect: Allow
            Resource: '*'
          - Action: ec2:DescribeKeyPairs
            Effect: Allow
            Resource: '*'
          - Action: cloudformation:UpdateStack
            Effect: Allow
            Resource: '*'
          - Action: autoscaling:DescribeAutoScalingGroups
            Effect: Allow
            Resource: '*'
          - Action: autoscaling:UpdateAutoScalingGroup
            Effect: Allow
            Resource: '*'
          - Action: ec2:DescribeLaunchTemplateVersions
            Effect: Allow
            Resource: '*'
          - Action: iam:CreateServiceLinkedRole
            Effect: Allow
            Resource: '*'
          - Action: ec2:*
            Effect: Allow
            Resource: '*'
          Version: '2012-10-17'
        PolicyName:
          Fn::Join:
          - '-'
          - - Ref: AWS::StackName
            - lambdaFunctionRole
    Type: AWS::IAM::Role
  listener:
    DependsOn:
    - loadBalancer
    - targetGroup
    Properties:
      DefaultActions:
      - TargetGroupArn:
          Ref: targetGroup
        Type: forward
      LoadBalancerArn:
        Ref: loadBalancer
      Port: 80
      Protocol: HTTP
    Type: AWS::ElasticLoadBalancingV2::Listener
  loadBalancer:
    DependsOn:
    - loadBalancerSecurityGroup
    - publicSubnet1
    - publicSubnet2
    Properties:
      Scheme: internet-facing
      SecurityGroups:
      - Ref: loadBalancerSecurityGroup
      Subnets:
      - Ref: publicSubnet1
      - Ref: publicSubnet2
      Tags:
      - Key: Name
        Value: Demonstration of vertical scaling with EC2 Auto Scaling Groups - load balancer
      Type: application
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
  loadBalancerSecurityGroup:
    DependsOn:
    - vpc
    Properties:
      GroupDescription: Allow http (80)
      SecurityGroupIngress:
      - CidrIp:
          Ref: sourceCidr
        FromPort: 80
        IpProtocol: tcp
        ToPort: 80
      VpcId:
        Ref: vpc
    Type: AWS::EC2::SecurityGroup
  publicRoute:
    DependsOn:
    - publicRouteTable
    - internetGateway
    - attachGateway
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: internetGateway
      RouteTableId:
        Ref: publicRouteTable
    Type: AWS::EC2::Route
  publicRouteTable:
    DependsOn:
    - vpc
    - attachGateway
    Properties:
      Tags:
      - Key: Name
        Value: Demonstration of vertical scaling with EC2 Auto Scaling Groups - public route
          table
      VpcId:
        Ref: vpc
    Type: AWS::EC2::RouteTable
  publicSubnet1:
    DependsOn: attachGateway
    Properties:
      AvailabilityZone:
        Fn::Select:
        - 0
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Fn::FindInMap:
        - CidrMappings
        - public-subnet-1
        - CIDR
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: Demonstration of vertical scaling with EC2 Auto Scaling Groups - public subnet
          1
      VpcId:
        Ref: vpc
    Type: AWS::EC2::Subnet
  publicSubnet1RouteTableAssociation:
    DependsOn:
    - publicRouteTable
    - publicSubnet1
    - attachGateway
    Properties:
      RouteTableId:
        Ref: publicRouteTable
      SubnetId:
        Ref: publicSubnet1
    Type: AWS::EC2::SubnetRouteTableAssociation
  publicSubnet2:
    DependsOn: attachGateway
    Properties:
      AvailabilityZone:
        Fn::Select:
        - 1
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Fn::FindInMap:
        - CidrMappings
        - public-subnet-2
        - CIDR
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: Demonstration of vertical scaling with EC2 Auto Scaling Groups - public subnet
          2
      VpcId:
        Ref: vpc
    Type: AWS::EC2::Subnet
  publicSubnet2RouteTableAssociation:
    DependsOn:
    - publicRouteTable
    - publicSubnet2
    - attachGateway
    Properties:
      RouteTableId:
        Ref: publicRouteTable
      SubnetId:
        Ref: publicSubnet2
    Type: AWS::EC2::SubnetRouteTableAssociation
  snsTopic:
    Properties:
      DisplayName: Demonstration of vertical scaling with EC2 Auto Scaling Groups - sns topic
    Type: AWS::SNS::Topic
  snsTopicPolicy:
    DependsOn:
    - snsTopic
    Properties:
      PolicyDocument:
        Id:
          Fn::GetAtt:
          - snsTopic
          - TopicName
        Statement:
        - Action: sns:Publish
          Condition:
            StringEquals:
              AWS:SourceOwner:
                Ref: AWS::AccountId
          Effect: Allow
          Principal:
            AWS: '*'
          Resource:
            Ref: snsTopic
        Version: '2012-10-17'
      Topics:
      - Ref: snsTopic
    Type: AWS::SNS::TopicPolicy
  targetGroup:
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      Tags:
      - Key: Name
        Value: Demonstration of vertical scaling with EC2 Auto Scaling Groups - target group
      UnhealthyThresholdCount: 5
      VpcId:
        Ref: vpc
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
  topicSubscription:
    Properties:
      Endpoint:
        Fn::GetAtt:
        - lambdaFunction
        - Arn
      Protocol: lambda
      TopicArn:
        Ref: snsTopic
    Type: AWS::SNS::Subscription
  vpc:
    Properties:
      CidrBlock:
        Fn::FindInMap:
        - CidrMappings
        - vpc
        - CIDR
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
      - Key: Name
        Value: Demonstration of vertical scaling with EC2 Auto Scaling Groups - vpc
    Type: AWS::EC2::VPC
...
