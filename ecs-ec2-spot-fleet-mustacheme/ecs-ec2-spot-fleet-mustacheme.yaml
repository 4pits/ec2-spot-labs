---
AWSTemplateFormatVersion: 2010-09-09
Description: Environment for running a demo of the MustacheMe application using ECS with Spot
  Instances
Mappings:
  CidrMappings:
    public-subnet-1:
      CIDR: 10.0.1.0/24
    public-subnet-2:
      CIDR: 10.0.2.0/24
    vpc:
      CIDR: 10.0.0.0/16
  ECSAmi:
    ap-northeast-1:
      AMI: ami-30bdce57
    ap-southeast-1:
      AMI: ami-9f75ddfc
    ap-southeast-2:
      AMI: ami-cf393cac
    ca-central-1:
      AMI: ami-1b01b37f
    eu-central-1:
      AMI: ami-38dc1157
    eu-west-1:
      AMI: ami-e3fbd290
    eu-west-2:
      AMI: ami-77f6fc13
    us-east-1:
      AMI: ami-a58760b3
    us-east-2:
      AMI: ami-a6e4bec3
    us-west-1:
      AMI: ami-74cb9b14
    us-west-2:
      AMI: ami-5b6dde3b
Outputs:
  applicationLoadBalancer:
    Description: The name of the Application Load Balancer
    Value:
      Ref: applicationLoadBalancer
  applicationLoadBalancerUrl:
    Description: The URL of the Application Load Balancer
    Value:
      Fn::Join:
      - ''
      - - http://
        - Fn::GetAtt:
          - applicationLoadBalancer
          - DNSName
  awsRegionName:
    Description: The name of the AWS Region your template was launched in
    Value:
      Ref: AWS::Region
  cloudWatchLogsGroupName:
    Description: Name of the CloudWatch Logs Group
    Value:
      Ref: cloudWatchLogsGroup
  ecsClusterName:
    Description: The name of the ECS Cluster
    Value:
      Ref: ecsCluster
  ecsService:
    Description: The name of the ECS Service
    Value:
      Ref: ecsService
  spotFleetName:
    Description: The name of the Spot Fleet
    Value:
      Ref: spotFleet
  taskDefinition:
    Description: The name of the ECS Task taskDefinition
    Value:
      Ref: taskDefinition
Parameters:
  ecsClusterMaxCapacity:
    Default: '16'
    Description: Maximum number of EC2 Spot instances the ECS Cluster can scale to
    Type: Number
  ecsClusterTargetCapacity:
    Default: '2'
    Description: Number of EC2 Spot instances to initially launch in the ECS Cluster
    Type: Number
  ecsServiceMaxCapacity:
    Default: '32'
    Description: Number of tasks to initially launch in the ECS Service
    Type: Number
  ecsServiceTargetCapacity:
    Default: '2'
    Description: Maximum number of tasks the ECS Service can scale to
    Type: Number
  keyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the EC2 instances
    Type: AWS::EC2::KeyPair::KeyName
  mustachemeRepositoryUri:
    Description: URI of the MustacheMe container repository
    Type: String
  sourceCidr:
    Default: 0.0.0.0/0
    Description: Optional - CIDR/IP range for instance ssh access - defaults to 0.0.0.0/0
    Type: String
Resources:
  applicationLoadBalancer:
    DependsOn:
    - applicationLoadBalancerSecurityGroup
    Properties:
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: 30
      Scheme: internet-facing
      SecurityGroups:
      - Ref: applicationLoadBalancerSecurityGroup
      Subnets:
      - Ref: publicSubnet1
      - Ref: publicSubnet2
      Tags:
      - Key: Name
        Value: Application Load Balancer
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
  applicationLoadBalancerListener:
    DependsOn:
    - applicationLoadBalancer
    - applicationLoadBalancerTargetGroup
    Properties:
      DefaultActions:
      - TargetGroupArn:
          Ref: applicationLoadBalancerTargetGroup
        Type: forward
      LoadBalancerArn:
        Ref: applicationLoadBalancer
      Port: 80
      Protocol: HTTP
    Type: AWS::ElasticLoadBalancingV2::Listener
  applicationLoadBalancerSecurityGroup:
    DependsOn:
    - vpc
    Properties:
      GroupDescription: Application Load Balancer Security Group
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        FromPort: 80
        IpProtocol: tcp
        ToPort: 80
      VpcId:
        Ref: vpc
    Type: AWS::EC2::SecurityGroup
  applicationLoadBalancerTargetGroup:
    DependsOn:
    - vpc
    Properties:
      HealthCheckIntervalSeconds: 5
      HealthCheckPath: /infos/ip
      HealthCheckTimeoutSeconds: 2
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      Tags:
      - Key: Name
        Value: Application Load Balancer Target Group
      TargetGroupAttributes:
      - Key: stickiness.enabled
        Value: true
      - Key: deregistration_delay.timeout_seconds
        Value: 0
      UnhealthyThresholdCount: 2
      VpcId:
        Ref: vpc
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
  attachGateway:
    DependsOn:
    - vpc
    - internetGateway
    Properties:
      InternetGatewayId:
        Ref: internetGateway
      VpcId:
        Ref: vpc
    Type: AWS::EC2::VPCGatewayAttachment
  cloudWatchLogsGroup:
    Properties:
      RetentionInDays: 7
    Type: AWS::Logs::LogGroup
  ecsCluster:
    Type: AWS::ECS::Cluster
  ecsClusterMemoryReservationAlarm:
    DependsOn:
    - ecsCluster
    - scalingPolicy
    Properties:
      AlarmActions:
      - Ref: scalingPolicy
      AlarmDescription: Alarm if ECS Cluster memory reservation reaches 75%
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
      - Name: ClusterName
        Value:
          Ref: ecsCluster
      EvaluationPeriods: 1
      MetricName: MemoryReservation
      Namespace: AWS/ECS
      Period: 60
      Statistic: Sum
      Threshold: 75
    Type: AWS::CloudWatch::Alarm
  ecsService:
    DependsOn:
    - ecsCluster
    - ecsServiceRole
    - taskDefinition
    - applicationLoadBalancer
    - applicationLoadBalancerListener
    - applicationLoadBalancerTargetGroup
    Properties:
      Cluster:
        Ref: ecsCluster
      DesiredCount:
        Ref: ecsServiceTargetCapacity
      LoadBalancers:
      - ContainerName: mustacheme
        ContainerPort: 80
        TargetGroupArn:
          Ref: applicationLoadBalancerTargetGroup
      Role:
        Ref: ecsServiceRole
      TaskDefinition:
        Ref: taskDefinition
    Type: AWS::ECS::Service
  ecsServiceAutoscaleRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - application-autoscaling.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole
      Path: /
    Type: AWS::IAM::Role
  ecsServiceRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - ecs.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole
      Path: /
    Type: AWS::IAM::Role
  ecsServiceScalableTarget:
    DependsOn:
    - ecsCluster
    - ecsService
    - ecsServiceAutoscaleRole
    Properties:
      MaxCapacity:
        Ref: ecsServiceMaxCapacity
      MinCapacity:
        Ref: ecsServiceTargetCapacity
      ResourceId:
        Fn::Join:
        - ''
        - - service/
          - Ref: ecsCluster
          - /
          - Fn::GetAtt:
            - ecsService
            - Name
      RoleARN:
        Fn::GetAtt:
        - ecsServiceAutoscaleRole
        - Arn
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
    Type: AWS::ApplicationAutoScaling::ScalableTarget
  ecsServiceScalingPolicy:
    DependsOn:
    - ecsServiceScalableTarget
    Properties:
      PolicyName: ecsServiceStepPolicy
      PolicyType: StepScaling
      ScalingTargetId:
        Ref: ecsServiceScalableTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: PercentChangeInCapacity
        Cooldown: 30
        MetricAggregationType: Average
        StepAdjustments:
        - MetricIntervalLowerBound: 0
          ScalingAdjustment: 200
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
  internetGateway:
    DependsOn:
    - vpc
    Type: AWS::EC2::InternetGateway
  publicRoute:
    DependsOn:
    - publicRouteTable
    - internetGateway
    - attachGateway
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: internetGateway
      RouteTableId:
        Ref: publicRouteTable
    Type: AWS::EC2::Route
  publicRouteTable:
    DependsOn:
    - vpc
    - attachGateway
    Properties:
      Tags:
      - Key: Name
        Value: Public Route Table
      VpcId:
        Ref: vpc
    Type: AWS::EC2::RouteTable
  publicSubnet1:
    DependsOn: attachGateway
    Properties:
      AvailabilityZone:
        Fn::Select:
        - 0
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Fn::FindInMap:
        - CidrMappings
        - public-subnet-1
        - CIDR
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: Public Subnet 1
      VpcId:
        Ref: vpc
    Type: AWS::EC2::Subnet
  publicSubnet1RouteTableAssociation:
    DependsOn:
    - publicRouteTable
    - publicSubnet1
    - attachGateway
    Properties:
      RouteTableId:
        Ref: publicRouteTable
      SubnetId:
        Ref: publicSubnet1
    Type: AWS::EC2::SubnetRouteTableAssociation
  publicSubnet2:
    DependsOn: attachGateway
    Properties:
      AvailabilityZone:
        Fn::Select:
        - 1
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Fn::FindInMap:
        - CidrMappings
        - public-subnet-2
        - CIDR
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: Public Subnet 2
      VpcId:
        Ref: vpc
    Type: AWS::EC2::Subnet
  publicSubnet2RouteTableAssociation:
    DependsOn:
    - publicRouteTable
    - publicSubnet2
    - attachGateway
    Properties:
      RouteTableId:
        Ref: publicRouteTable
      SubnetId:
        Ref: publicSubnet2
    Type: AWS::EC2::SubnetRouteTableAssociation
  scalableTarget:
    DependsOn:
    - spotFleet
    - spotFleetAutoscaleRole
    Properties:
      MaxCapacity:
        Ref: ecsClusterMaxCapacity
      MinCapacity:
        Ref: ecsClusterTargetCapacity
      ResourceId:
        Fn::Join:
        - /
        - - spot-fleet-request
          - Ref: spotFleet
      RoleARN:
        Fn::GetAtt:
        - spotFleetAutoscaleRole
        - Arn
      ScalableDimension: ec2:spot-fleet-request:TargetCapacity
      ServiceNamespace: ec2
    Type: AWS::ApplicationAutoScaling::ScalableTarget
  scalingPolicy:
    DependsOn:
    - scalableTarget
    Properties:
      PolicyName: StepPolicy
      PolicyType: StepScaling
      ScalingTargetId:
        Ref: scalableTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: PercentChangeInCapacity
        Cooldown: 30
        MetricAggregationType: Average
        StepAdjustments:
        - MetricIntervalLowerBound: 0
          ScalingAdjustment: 100
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
  securityGroup:
    DependsOn:
    - vpc
    Properties:
      GroupDescription: Spot Fleet Instance Security Group
      SecurityGroupIngress:
      - CidrIp:
          Ref: sourceCidr
        FromPort: 22
        IpProtocol: tcp
        ToPort: 22
      - CidrIp: 0.0.0.0/0
        FromPort: 80
        IpProtocol: tcp
        ToPort: 80
      VpcId:
        Ref: vpc
    Type: AWS::EC2::SecurityGroup
  securityGroupIngress:
    DependsOn:
    - securityGroup
    - applicationLoadBalancerSecurityGroup
    Properties:
      FromPort: 31000
      GroupId:
        Fn::GetAtt:
        - securityGroup
        - GroupId
      IpProtocol: tcp
      SourceSecurityGroupId:
        Fn::GetAtt:
        - applicationLoadBalancerSecurityGroup
        - GroupId
      ToPort: 61000
    Type: AWS::EC2::SecurityGroupIngress
  spotFleet:
    DependsOn:
    - spotFleetRole
    - spotFleetInstanceProfile
    - ecsCluster
    - securityGroup
    Properties:
      SpotFleetRequestConfigData:
        AllocationStrategy: diversified
        IamFleetRole:
          Fn::GetAtt:
          - spotFleetRole
          - Arn
        LaunchSpecifications:
        - IamInstanceProfile:
            Arn:
              Fn::GetAtt:
              - spotFleetInstanceProfile
              - Arn
          ImageId:
            Fn::FindInMap:
            - ECSAmi
            - Ref: AWS::Region
            - AMI
          InstanceType: m4.large
          KeyName:
            Ref: keyName
          Monitoring:
            Enabled: true
          SecurityGroups:
          - GroupId:
              Ref: securityGroup
          SubnetId:
            Fn::Join:
            - ','
            - - Ref: publicSubnet1
              - Ref: publicSubnet2
          UserData:
            Fn::Base64:
              Fn::Sub: '#!/bin/bash -xe

                yum -y --security update

                yum -y update aws-cli

                echo ECS_CLUSTER=${ecsCluster} >> /etc/ecs/ecs.config

                echo ECS_AVAILABLE_LOGGING_DRIVERS=[\"json-file\",\"awslogs\"] >> /etc/ecs/ecs.config

                '
        - IamInstanceProfile:
            Arn:
              Fn::GetAtt:
              - spotFleetInstanceProfile
              - Arn
          ImageId:
            Fn::FindInMap:
            - ECSAmi
            - Ref: AWS::Region
            - AMI
          InstanceType: m4.xlarge
          KeyName:
            Ref: keyName
          Monitoring:
            Enabled: true
          SecurityGroups:
          - GroupId:
              Ref: securityGroup
          SubnetId:
            Fn::Join:
            - ','
            - - Ref: publicSubnet1
              - Ref: publicSubnet2
          UserData:
            Fn::Base64:
              Fn::Sub: '#!/bin/bash -xe

                yum -y --security update

                yum -y update aws-cli

                echo ECS_CLUSTER=${ecsCluster} >> /etc/ecs/ecs.config

                echo ECS_AVAILABLE_LOGGING_DRIVERS=[\"json-file\",\"awslogs\"] >> /etc/ecs/ecs.config

                '
        - IamInstanceProfile:
            Arn:
              Fn::GetAtt:
              - spotFleetInstanceProfile
              - Arn
          ImageId:
            Fn::FindInMap:
            - ECSAmi
            - Ref: AWS::Region
            - AMI
          InstanceType: c4.large
          KeyName:
            Ref: keyName
          Monitoring:
            Enabled: true
          SecurityGroups:
          - GroupId:
              Ref: securityGroup
          SubnetId:
            Fn::Join:
            - ','
            - - Ref: publicSubnet1
              - Ref: publicSubnet2
          UserData:
            Fn::Base64:
              Fn::Sub: '#!/bin/bash -xe

                yum -y --security update

                yum -y update aws-cli

                echo ECS_CLUSTER=${ecsCluster} >> /etc/ecs/ecs.config

                echo ECS_AVAILABLE_LOGGING_DRIVERS=[\"json-file\",\"awslogs\"] >> /etc/ecs/ecs.config

                '
        - IamInstanceProfile:
            Arn:
              Fn::GetAtt:
              - spotFleetInstanceProfile
              - Arn
          ImageId:
            Fn::FindInMap:
            - ECSAmi
            - Ref: AWS::Region
            - AMI
          InstanceType: c4.xlarge
          KeyName:
            Ref: keyName
          Monitoring:
            Enabled: true
          SecurityGroups:
          - GroupId:
              Ref: securityGroup
          SubnetId:
            Fn::Join:
            - ','
            - - Ref: publicSubnet1
              - Ref: publicSubnet2
          UserData:
            Fn::Base64:
              Fn::Sub: '#!/bin/bash -xe

                yum -y --security update

                yum -y update aws-cli

                echo ECS_CLUSTER=${ecsCluster} >> /etc/ecs/ecs.config

                echo ECS_AVAILABLE_LOGGING_DRIVERS=[\"json-file\",\"awslogs\"] >> /etc/ecs/ecs.config

                '
        - IamInstanceProfile:
            Arn:
              Fn::GetAtt:
              - spotFleetInstanceProfile
              - Arn
          ImageId:
            Fn::FindInMap:
            - ECSAmi
            - Ref: AWS::Region
            - AMI
          InstanceType: r3.large
          KeyName:
            Ref: keyName
          Monitoring:
            Enabled: true
          SecurityGroups:
          - GroupId:
              Ref: securityGroup
          SubnetId:
            Fn::Join:
            - ','
            - - Ref: publicSubnet1
              - Ref: publicSubnet2
          UserData:
            Fn::Base64:
              Fn::Sub: '#!/bin/bash -xe

                yum -y --security update

                yum -y update aws-cli

                echo ECS_CLUSTER=${ecsCluster} >> /etc/ecs/ecs.config

                echo ECS_AVAILABLE_LOGGING_DRIVERS=[\"json-file\",\"awslogs\"] >> /etc/ecs/ecs.config

                '
        - IamInstanceProfile:
            Arn:
              Fn::GetAtt:
              - spotFleetInstanceProfile
              - Arn
          ImageId:
            Fn::FindInMap:
            - ECSAmi
            - Ref: AWS::Region
            - AMI
          InstanceType: r3.xlarge
          KeyName:
            Ref: keyName
          Monitoring:
            Enabled: true
          SecurityGroups:
          - GroupId:
              Ref: securityGroup
          SubnetId:
            Fn::Join:
            - ','
            - - Ref: publicSubnet1
              - Ref: publicSubnet2
          UserData:
            Fn::Base64:
              Fn::Sub: '#!/bin/bash -xe

                yum -y --security update

                yum -y update aws-cli

                echo ECS_CLUSTER=${ecsCluster} >> /etc/ecs/ecs.config

                echo ECS_AVAILABLE_LOGGING_DRIVERS=[\"json-file\",\"awslogs\"] >> /etc/ecs/ecs.config

                '
        SpotPrice: 1.705
        TargetCapacity:
          Ref: ecsClusterTargetCapacity
        TerminateInstancesWithExpiration: true
    Type: AWS::EC2::SpotFleet
  spotFleetAutoscaleRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - application-autoscaling.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonEC2SpotFleetAutoscaleRole
      Path: /
    Type: AWS::IAM::Role
  spotFleetInstanceProfile:
    DependsOn:
    - spotFleetInstanceRole
    Properties:
      Path: /
      Roles:
      - Ref: spotFleetInstanceRole
    Type: AWS::IAM::InstanceProfile
  spotFleetInstanceRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
      Path: /
    Type: AWS::IAM::Role
  spotFleetRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - spotfleet.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonEC2SpotFleetRole
      Path: /
    Type: AWS::IAM::Role
  targetResponseTimeAlarm:
    DependsOn:
    - ecsServiceScalingPolicy
    - applicationLoadBalancer
    Properties:
      AlarmActions:
      - Ref: ecsServiceScalingPolicy
      AlarmDescription: Alarm if Target Response Time grows too long
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
      - Name: LoadBalancer
        Value:
          Fn::GetAtt:
          - applicationLoadBalancer
          - LoadBalancerFullName
      EvaluationPeriods: 1
      MetricName: TargetResponseTime
      Namespace: AWS/ApplicationELB
      Period: 60
      Statistic: Average
      Threshold: 0.015
    Type: AWS::CloudWatch::Alarm
  taskDefinition:
    DependsOn:
    - cloudWatchLogsGroup
    Properties:
      ContainerDefinitions:
      - Image:
          Ref: mustachemeRepositoryUri
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: cloudWatchLogsGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: mustacheme
        Memory: '1600'
        Name: mustacheme
        PortMappings:
        - ContainerPort: 80
          HostPort: 0
          Protocol: tcp
    Type: AWS::ECS::TaskDefinition
  vpc:
    Properties:
      CidrBlock:
        Fn::FindInMap:
        - CidrMappings
        - vpc
        - CIDR
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
      - Key: Name
        Value: ECS Spot MutsacheMe Demo VPC
    Type: AWS::EC2::VPC
...
